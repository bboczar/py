# Error handlingclass Error(Exception):    def __init__(self):        self.error_msg = ""    def what(self):        return self.error_msgclass ValError(Error):    def __init__(self, row, col, val):        self.error_msg = "Invalid value %i at row %i and col %i" % (val, row + 1, col + 1)class SizeError(Error):    def __init__(self):        self.error_msg = "Invalid size of provided board!"class LogicError(Error):    def __init__(self):        self.error_msg = "Input sudoku is not solvable!"# ConstantsBOARD_SIZE = 9BOX_SIZE = 3# Helper functionsdef validate(board):    if len(board) > BOARD_SIZE:        raise SizeError()    for row in board:        if len(row) > BOARD_SIZE:            raise SizeError()    for row in range(BOARD_SIZE):        for col in range(BOARD_SIZE):            if board[row][col] > BOARD_SIZE:                raise ValError(row, col, board[row][col])def load_board():    with open("sudoku.txt") as file:        board = board = [[int(val) for val in line.split(",")] for line in file]        validate(board)    return boarddef print_board(board):    for row in range(BOARD_SIZE):        if (row % 3 == 0) and (row != 0):            print("---------------------")        for col in range(BOARD_SIZE):            if (col % 3 == 0) and (col != 0):                print("| ", end="")            print(board[row][col], end=" ")        print("")# Solve functionsdef fits_in_row(board, row, val):    for col in range(BOARD_SIZE):        if board[row][col] == val:            return False    return Truedef fits_in_col(board, col, val):    for row in range(BOARD_SIZE):        if board[row][col] == val:            return False    return Truedef fits_in_box(board, row, col, val):    box_row = (row - row % 3)    box_col = (col - col % 3)    for row in range(box_row, box_row + BOX_SIZE):        for col in range(box_col, box_col + BOX_SIZE):            if board[row][col] == val:                return False    return Truedef fits_in_place(board, row, col, val):    return fits_in_row(board, row, val) \        and fits_in_col(board, col, val) \        and fits_in_box(board, row, col, val)def solve_board(board):    for row in range(BOARD_SIZE):        for col in range(BOARD_SIZE):            if board[row][col] == 0:                for val in range(1, BOARD_SIZE + 1):                    if fits_in_place(board, row, col, val):                        board[row][col] = val                        if solve_board(board):                            return True                        else:                            board[row][col] = 0                return False    return Trueif __name__ == "__main__":    try:        board = load_board()        print("Trying to solve board!")        print_board(board)        if solve_board(board):            print("Board solved!")            print_board(board)        else:            raise LogicError()    except Error as exception:        print(exception.what())